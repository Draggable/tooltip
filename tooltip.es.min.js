
/**
@draggable/tooltip - https://github.com/Draggable/tooltip
Version: 1.0.1
Author: Draggable https://draggable.io
*/


var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
const tooltipTrigger = `MYkh1v7x`;
const tooltip = `_3x4ZIcu-`;
const visible = `JIt36hCJ`;
const styles = { "tooltip-trigger": tooltipTrigger, tooltipTrigger, tooltip, visible };
console.log(styles);
const defaultOptions = {
  triggerName: "tooltip"
};
class SmartTooltip {
  constructor(options = defaultOptions) {
    __publicField(this, "options");
    __publicField(this, "tooltip");
    __publicField(this, "activeTriggerType", null);
    this.options = options;
    this.tooltip = document.createElement("div");
    this.tooltip.className = styles.tooltip;
    document.body.appendChild(this.tooltip);
    this.setupEventListeners();
  }
  setupEventListeners() {
    const triggerName = `data-${this.options.triggerName}`;
    document.addEventListener("mouseover", (e) => {
      const trigger = e.target.closest(`[${triggerName}]`);
      if (this.activeTriggerType !== "click" && (trigger == null ? void 0 : trigger.getAttribute(`${triggerName}-type`)) !== "click") {
        const content = trigger == null ? void 0 : trigger.getAttribute(`${triggerName}`);
        if (content) {
          this.show(trigger, content);
          this.activeTriggerType = "hover";
        }
      }
    });
    document.addEventListener("mouseout", (e) => {
      const trigger = e.target.closest(`[${triggerName}]`);
      if (this.activeTriggerType !== "click" && (trigger == null ? void 0 : trigger.getAttribute(`${triggerName}-type`)) !== "click") {
        this.hide();
      }
    });
    document.addEventListener("click", (e) => {
      const trigger = e.target.closest(`[${triggerName}][${triggerName}-type="click"]`);
      if (trigger) {
        if (this.isVisible()) {
          this.hide();
        } else {
          const content = trigger.getAttribute(`${triggerName}`);
          this.show(trigger, content);
          this.activeTriggerType = "click";
        }
      } else {
        this.hide();
      }
    });
  }
  isVisible() {
    return this.tooltip.classList.contains(styles.visible);
  }
  calculatePosition(trigger) {
    const triggerRect = trigger.getBoundingClientRect();
    const tooltipRect = this.tooltip.getBoundingClientRect();
    const spacing = 12;
    const positions = [
      {
        name: "top",
        x: triggerRect.left + (triggerRect.width - tooltipRect.width) / 2,
        y: triggerRect.top - tooltipRect.height - spacing
      },
      {
        name: "bottom",
        x: triggerRect.left + (triggerRect.width - tooltipRect.width) / 2,
        y: triggerRect.bottom + spacing
      },
      {
        name: "right",
        x: triggerRect.right + spacing,
        y: triggerRect.top + (triggerRect.height - tooltipRect.height) / 2
      },
      {
        name: "left",
        x: triggerRect.left - tooltipRect.width - spacing,
        y: triggerRect.top + (triggerRect.height - tooltipRect.height) / 2
      }
    ];
    for (const pos of positions) {
      if (this.fitsInViewport(pos.x, pos.y, tooltipRect.width, tooltipRect.height)) {
        return pos;
      }
    }
    return positions[0];
  }
  fitsInViewport(x, y, width, height) {
    return x >= 0 && y >= 0 && x + width <= window.innerWidth && y + height <= window.innerHeight;
  }
  show(trigger, content) {
    this.tooltip.innerHTML = content ?? "";
    this.tooltip.classList.add(styles.visible);
    const position = this.calculatePosition(trigger);
    this.tooltip.style.left = `${position.x}px`;
    this.tooltip.style.top = `${position.y}px`;
    this.tooltip.dataset.position = position.name;
  }
  hide() {
    this.tooltip.classList.remove(styles.visible);
    this.activeTriggerType = null;
  }
}
export {
  SmartTooltip,
  SmartTooltip as default
};
