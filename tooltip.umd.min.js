
/**
@draggable/tooltip - https://github.com/Draggable/tooltip
Version: 1.0.0
Author: Draggable https://draggable.io
*/


!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).tooltip={})}(this,(function(t){"use strict";var e=Object.defineProperty,i=(t,i,o)=>((t,i,o)=>i in t?e(t,i,{enumerable:!0,configurable:!0,writable:!0,value:o}):t[i]=o)(t,"symbol"!=typeof i?i+"":i,o);const o="MYkh1v7x",s={"tooltip-trigger":o,tooltipTrigger:o,tooltip:"_3x4ZIcu-",visible:"JIt36hCJ"},n={triggerName:"tooltip"};class l{constructor(t=n){i(this,"options"),i(this,"tooltip"),i(this,"activeTriggerType",null),this.options=t,this.tooltip=document.createElement("div"),this.tooltip.className=s.tooltip,document.body.appendChild(this.tooltip),this.setupEventListeners()}setupEventListeners(){const t=`data-${this.options.triggerName}`;document.addEventListener("mouseover",(e=>{const i=e.target.closest(`[${t}]`);if("click"!==this.activeTriggerType&&"click"!==(null==i?void 0:i.getAttribute(`${t}-type`))){const e=null==i?void 0:i.getAttribute(`${t}`);e&&(this.show(i,e),this.activeTriggerType="hover")}})),document.addEventListener("mouseout",(e=>{const i=e.target.closest(`[${t}]`);"click"!==this.activeTriggerType&&"click"!==(null==i?void 0:i.getAttribute(`${t}-type`))&&this.hide()})),document.addEventListener("click",(e=>{const i=e.target.closest(`[${t}][${t}-type="click"]`);if(i)if(this.isVisible())this.hide();else{const e=i.getAttribute(`${t}`);this.show(i,e),this.activeTriggerType="click"}else this.hide()}))}isVisible(){return this.tooltip.classList.contains(s.visible)}calculatePosition(t){const e=t.getBoundingClientRect(),i=this.tooltip.getBoundingClientRect(),o=[{name:"top",x:e.left+(e.width-i.width)/2,y:e.top-i.height-12},{name:"bottom",x:e.left+(e.width-i.width)/2,y:e.bottom+12},{name:"right",x:e.right+12,y:e.top+(e.height-i.height)/2},{name:"left",x:e.left-i.width-12,y:e.top+(e.height-i.height)/2}];for(const s of o)if(this.fitsInViewport(s.x,s.y,i.width,i.height))return s;return o[0]}fitsInViewport(t,e,i,o){return t>=0&&e>=0&&t+i<=window.innerWidth&&e+o<=window.innerHeight}show(t,e){this.tooltip.innerHTML=e??"",this.tooltip.classList.add(s.visible);const i=this.calculatePosition(t);this.tooltip.style.left=`${i.x}px`,this.tooltip.style.top=`${i.y}px`,this.tooltip.dataset.position=i.name}hide(){this.tooltip.classList.remove(s.visible),this.activeTriggerType=null}}t.SmartTooltip=l,t.default=l,Object.defineProperties(t,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})}));
